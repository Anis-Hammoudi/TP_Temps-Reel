// Script de test pour valider les fonctionnalit√©s de s√©curit√©
// √Ä ex√©cuter avec : node test-security.js

const axios = require('axios').default;
const BASE_URL = 'http://localhost:3000/api';

// Fonction utilitaire pour les logs color√©s
const log = {
    info: (msg) => console.log(`\x1b[36m[INFO]\x1b[0m ${msg}`),
    success: (msg) => console.log(`\x1b[32m[SUCCESS]\x1b[0m ${msg}`),
    error: (msg) => console.log(`\x1b[31m[ERROR]\x1b[0m ${msg}`),
    warning: (msg) => console.log(`\x1b[33m[WARNING]\x1b[0m ${msg}`)
};

async function runSecurityTests() {
    console.log('\nüîí Tests de s√©curit√© de l\'application collaborative\n');
    
    let userAToken = null;
    let userBToken = null;
    let noteId = null;
    
    try {
        // Test 1 : Tentative d'acc√®s non autoris√©
        log.info('Test 1 : Tentative de cr√©ation de note sans authentification');
        try {
            await axios.post(`${BASE_URL}/notes`, { content: 'Note non autoris√©e' });
            log.error('√âCHEC - La cr√©ation devrait √™tre refus√©e');
        } catch (error) {
            if (error.response?.status === 401) {
                log.success('R√âUSSI - Acc√®s correctement refus√© (401)');
            } else {
                log.error(`√âCHEC - Code d'erreur inattendu: ${error.response?.status}`);
            }
        }
        
        // Test 2 : Inscription utilisateur A
        log.info('Test 2 : Inscription utilisateur A');
        try {
            const response = await axios.post(`${BASE_URL}/register`, {
                username: 'testUserA',
                password: 'motdepasse123'
            });
            userAToken = response.data.token;
            log.success(`R√âUSSI - Utilisateur A cr√©√© avec token: ${userAToken.substring(0, 20)}...`);
        } catch (error) {
            log.error(`√âCHEC - ${error.response?.data?.error || error.message}`);
            return;
        }
        
        // Test 3 : Inscription utilisateur B
        log.info('Test 3 : Inscription utilisateur B');
        try {
            const response = await axios.post(`${BASE_URL}/register`, {
                username: 'testUserB',
                password: 'motdepasse456'
            });
            userBToken = response.data.token;
            log.success(`R√âUSSI - Utilisateur B cr√©√© avec token: ${userBToken.substring(0, 20)}...`);
        } catch (error) {
            log.error(`√âCHEC - ${error.response?.data?.error || error.message}`);
            return;
        }
        
        // Test 4 : Cr√©ation de note par utilisateur A
        log.info('Test 4 : Cr√©ation de note par utilisateur A');
        try {
            const response = await axios.post(`${BASE_URL}/notes`, 
                { content: 'Note priv√©e de l\'utilisateur A' },
                { headers: { Authorization: `Bearer ${userAToken}` } }
            );
            noteId = response.data.id;
            log.success(`R√âUSSI - Note cr√©√©e avec ID: ${noteId}`);
        } catch (error) {
            log.error(`√âCHEC - ${error.response?.data?.error || error.message}`);
            return;
        }
        
        // Test 5 : Tentative de modification par utilisateur B
        log.info('Test 5 : Tentative de modification de la note de A par B');
        try {
            await axios.put(`${BASE_URL}/notes/${noteId}`,
                { content: 'Tentative de modification par B' },
                { headers: { Authorization: `Bearer ${userBToken}` } }
            );
            log.error('√âCHEC - La modification devrait √™tre refus√©e');
        } catch (error) {
            if (error.response?.status === 403) {
                log.success('R√âUSSI - Modification correctement refus√©e (403)');
            } else {
                log.error(`√âCHEC - Code d'erreur inattendu: ${error.response?.status}`);
            }
        }
        
        // Test 6 : Tentative de suppression par utilisateur B
        log.info('Test 6 : Tentative de suppression de la note de A par B');
        try {
            await axios.delete(`${BASE_URL}/notes/${noteId}`,
                { headers: { Authorization: `Bearer ${userBToken}` } }
            );
            log.error('√âCHEC - La suppression devrait √™tre refus√©e');
        } catch (error) {
            if (error.response?.status === 403) {
                log.success('R√âUSSI - Suppression correctement refus√©e (403)');
            } else {
                log.error(`√âCHEC - Code d'erreur inattendu: ${error.response?.status}`);
            }
        }
        
        // Test 7 : Modification l√©gitime par utilisateur A
        log.info('Test 7 : Modification l√©gitime par utilisateur A');
        try {
            const response = await axios.put(`${BASE_URL}/notes/${noteId}`,
                { content: 'Note modifi√©e par son propri√©taire' },
                { headers: { Authorization: `Bearer ${userAToken}` } }
            );
            log.success('R√âUSSI - Modification autoris√©e pour le propri√©taire');
        } catch (error) {
            log.error(`√âCHEC - ${error.response?.data?.error || error.message}`);
        }
        
        // Test 8 : Lecture des notes (sans authentification)
        log.info('Test 8 : Lecture des notes sans authentification');
        try {
            const response = await axios.get(`${BASE_URL}/notes`);
            log.success(`R√âUSSI - ${response.data.length} note(s) lue(s) sans authentification`);
        } catch (error) {
            log.error(`√âCHEC - ${error.response?.data?.error || error.message}`);
        }
        
        // Test 9 : Token invalide
        log.info('Test 9 : Utilisation d\'un token invalide');
        try {
            await axios.post(`${BASE_URL}/notes`,
                { content: 'Note avec token invalide' },
                { headers: { Authorization: 'Bearer token-invalide' } }
            );
            log.error('√âCHEC - L\'acc√®s devrait √™tre refus√©');
        } catch (error) {
            if (error.response?.status === 403) {
                log.success('R√âUSSI - Token invalide correctement rejet√© (403)');
            } else {
                log.error(`√âCHEC - Code d'erreur inattendu: ${error.response?.status}`);
            }
        }
        
        // Test 10 : Nettoyage - Suppression par le propri√©taire
        log.info('Test 10 : Suppression de la note par son propri√©taire');
        try {
            await axios.delete(`${BASE_URL}/notes/${noteId}`,
                { headers: { Authorization: `Bearer ${userAToken}` } }
            );
            log.success('R√âUSSI - Suppression autoris√©e pour le propri√©taire');
        } catch (error) {
            log.error(`√âCHEC - ${error.response?.data?.error || error.message}`);
        }
        
        console.log('\n‚úÖ Tests de s√©curit√© termin√©s !');
        console.log('üìä V√©rifiez les logs ci-dessus pour identifier les √©ventuels probl√®mes.');
        
    } catch (error) {
        log.error(`Erreur g√©n√©rale: ${error.message}`);
    }
}

// V√©rifier que le serveur est accessible
async function checkServerStatus() {
    try {
        await axios.get('http://localhost:3000');
        log.success('Serveur accessible sur http://localhost:3000');
        return true;
    } catch (error) {
        log.error('Serveur non accessible. Assurez-vous qu\'il est d√©marr√© avec "npm start"');
        return false;
    }
}

// Ex√©cution principale
async function main() {
    const serverOk = await checkServerStatus();
    if (serverOk) {
        await runSecurityTests();
    }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
    log.error(`Erreur non g√©r√©e: ${reason}`);
    process.exit(1);
});

main();